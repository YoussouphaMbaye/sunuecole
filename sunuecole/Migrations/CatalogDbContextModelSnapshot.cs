// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sunuecole.models;

#nullable disable

namespace sunuecole.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sunuecole.models.Agents", b =>
                {
                    b.Property<int>("IdAgents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAgents"));

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("EmailAgents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAgents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneAgents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("IdAgents");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("sunuecole.models.Classe", b =>
                {
                    b.Property<int>("IdClasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClasse"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameClasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("niveau")
                        .HasColumnType("int");

                    b.HasKey("IdClasse");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("sunuecole.models.DoClasse", b =>
                {
                    b.Property<int>("idDoClasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDoClasse"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("hourId")
                        .HasColumnType("int");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("roomId")
                        .HasColumnType("int");

                    b.Property<int>("weekDay")
                        .HasColumnType("int");

                    b.HasKey("idDoClasse");

                    b.HasIndex("hourId");

                    b.HasIndex("lessonId");

                    b.HasIndex("roomId");

                    b.HasIndex("weekDay", "roomId", "hourId")
                        .IsUnique();

                    b.ToTable("DoClasses");
                });

            modelBuilder.Entity("sunuecole.models.Evaluation", b =>
                {
                    b.Property<int>("idEvaluation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEvaluation"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("evaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("evaluationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolYearID")
                        .HasColumnType("int");

                    b.Property<int>("semestre")
                        .HasColumnType("int");

                    b.Property<string>("staus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idEvaluation");

                    b.HasIndex("lessonId");

                    b.HasIndex("schoolYearID");

                    b.ToTable("Evaluation");
                });

            modelBuilder.Entity("sunuecole.models.Hours", b =>
                {
                    b.Property<int>("idHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idHours"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("heure")
                        .HasColumnType("time");

                    b.HasKey("idHours");

                    b.ToTable("Hours");
                });

            modelBuilder.Entity("sunuecole.models.InfSubscribe", b =>
                {
                    b.Property<int>("IdInfSubscribe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInfSubscribe"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("classeID")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("montant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolYearID")
                        .HasColumnType("int");

                    b.HasKey("IdInfSubscribe");

                    b.HasIndex("classeID");

                    b.HasIndex("schoolYearID", "classeID")
                        .IsUnique();

                    b.ToTable("InfSubscribe");
                });

            modelBuilder.Entity("sunuecole.models.Lesson", b =>
                {
                    b.Property<int>("idLesson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLesson"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("classeId")
                        .HasColumnType("int");

                    b.Property<int>("coefficient")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idTeacher")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLesson");

                    b.HasIndex("classeId");

                    b.HasIndex("idTeacher");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("sunuecole.models.MissOrHier", b =>
                {
                    b.Property<int>("idMissOrHier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idMissOrHier"));

                    b.Property<DateTime>("DayComing")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("HourComing")
                        .HasColumnType("time");

                    b.Property<bool>("MissingOrHier")
                        .HasColumnType("bit");

                    b.Property<int>("doClasseId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("idMissOrHier");

                    b.HasIndex("doClasseId");

                    b.HasIndex("studentId");

                    b.ToTable("MissOrHier");
                });

            modelBuilder.Entity("sunuecole.models.Note", b =>
                {
                    b.Property<int>("idNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idNote"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("evaluationId")
                        .HasColumnType("int");

                    b.Property<int>("mark")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("idNote");

                    b.HasIndex("evaluationId");

                    b.HasIndex("studentId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("sunuecole.models.Orders", b =>
                {
                    b.Property<int>("IdOrders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrders"));

                    b.Property<int>("agentID")
                        .HasColumnType("int");

                    b.Property<int?>("agentsIdAgents")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("productQuantity")
                        .HasColumnType("float");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("suppliesID")
                        .HasColumnType("int");

                    b.Property<double>("total")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice")
                        .HasColumnType("float");

                    b.HasKey("IdOrders");

                    b.HasIndex("agentsIdAgents");

                    b.HasIndex("suppliesID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("sunuecole.models.PaidSubscribe", b =>
                {
                    b.Property<int>("IdPaidSubscribe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaidSubscribe"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InfSubscribeID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("studentsID")
                        .HasColumnType("int");

                    b.HasKey("IdPaidSubscribe");

                    b.HasIndex("AgentID");

                    b.HasIndex("InfSubscribeID");

                    b.HasIndex("studentsID");

                    b.ToTable("PaidSubscribes");
                });

            modelBuilder.Entity("sunuecole.models.RegisterClasse", b =>
                {
                    b.Property<int>("IdRegisterClasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegisterClasse"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("classeID")
                        .HasColumnType("int");

                    b.Property<int>("schoolYearID")
                        .HasColumnType("int");

                    b.Property<int>("studentsId")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterClasse");

                    b.HasIndex("classeID");

                    b.HasIndex("schoolYearID");

                    b.HasIndex("studentsId", "schoolYearID")
                        .IsUnique();

                    b.ToTable("RegisterClasse");
                });

            modelBuilder.Entity("sunuecole.models.Room", b =>
                {
                    b.Property<int>("idRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRoom"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("placeCount")
                        .HasColumnType("int");

                    b.HasKey("idRoom");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("sunuecole.models.SchoolYear", b =>
                {
                    b.Property<int>("IdSchoolYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSchoolYear"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSchoolYear");

                    b.ToTable("SchoolYear");
                });

            modelBuilder.Entity("sunuecole.models.Students", b =>
                {
                    b.Property<int>("IdStudents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStudents"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameStudents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("IdStudents");

                    b.HasIndex("TutorID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("sunuecole.models.Supplies", b =>
                {
                    b.Property<int>("IdSupplies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSupplies"));

                    b.Property<string>("EmailSupplies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSupplies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneSupplies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSupplies");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("sunuecole.models.Teacher", b =>
                {
                    b.Property<int>("idTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTeacher"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("birthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("placeOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("idTeacher");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("sunuecole.models.Tutor", b =>
                {
                    b.Property<int>("IdTutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTutor"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameTutor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneTutor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("IdTutor");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sunuecole.models.DoClasse", b =>
                {
                    b.HasOne("sunuecole.models.Hours", "hour")
                        .WithMany("doClasse")
                        .HasForeignKey("hourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Lesson", "lesson")
                        .WithMany("doClasse")
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Room", "room")
                        .WithMany("doClasse")
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hour");

                    b.Navigation("lesson");

                    b.Navigation("room");
                });

            modelBuilder.Entity("sunuecole.models.Evaluation", b =>
                {
                    b.HasOne("sunuecole.models.Lesson", "lesson")
                        .WithMany("evaluations")
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.SchoolYear", "schoolYear")
                        .WithMany("evaluations")
                        .HasForeignKey("schoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("schoolYear");
                });

            modelBuilder.Entity("sunuecole.models.InfSubscribe", b =>
                {
                    b.HasOne("sunuecole.models.Classe", "classe")
                        .WithMany("infSubscribes")
                        .HasForeignKey("classeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.SchoolYear", "schoolYear")
                        .WithMany("infSubscribes")
                        .HasForeignKey("schoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classe");

                    b.Navigation("schoolYear");
                });

            modelBuilder.Entity("sunuecole.models.Lesson", b =>
                {
                    b.HasOne("sunuecole.models.Classe", "classe")
                        .WithMany("lessons")
                        .HasForeignKey("classeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Teacher", "teacher")
                        .WithMany("lessons")
                        .HasForeignKey("idTeacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classe");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("sunuecole.models.MissOrHier", b =>
                {
                    b.HasOne("sunuecole.models.DoClasse", "doClasse")
                        .WithMany("missOrHiers")
                        .HasForeignKey("doClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Students", "student")
                        .WithMany("missOrHiers")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doClasse");

                    b.Navigation("student");
                });

            modelBuilder.Entity("sunuecole.models.Note", b =>
                {
                    b.HasOne("sunuecole.models.Evaluation", "evaluation")
                        .WithMany("notes")
                        .HasForeignKey("evaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Students", "student")
                        .WithMany("notes")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("evaluation");

                    b.Navigation("student");
                });

            modelBuilder.Entity("sunuecole.models.Orders", b =>
                {
                    b.HasOne("sunuecole.models.Agents", "agents")
                        .WithMany("Orders")
                        .HasForeignKey("agentsIdAgents");

                    b.HasOne("sunuecole.models.Supplies", "supplie")
                        .WithMany("Orders")
                        .HasForeignKey("suppliesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agents");

                    b.Navigation("supplie");
                });

            modelBuilder.Entity("sunuecole.models.PaidSubscribe", b =>
                {
                    b.HasOne("sunuecole.models.Agents", "Agent")
                        .WithMany("paidSubscribes")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.InfSubscribe", "infSubscribe")
                        .WithMany("paidSubscribes")
                        .HasForeignKey("InfSubscribeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Students", "student")
                        .WithMany("paidSubscribes")
                        .HasForeignKey("studentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("infSubscribe");

                    b.Navigation("student");
                });

            modelBuilder.Entity("sunuecole.models.RegisterClasse", b =>
                {
                    b.HasOne("sunuecole.models.Classe", "classe")
                        .WithMany("rClasse")
                        .HasForeignKey("classeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.SchoolYear", "schoolYear")
                        .WithMany("rClasse")
                        .HasForeignKey("schoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sunuecole.models.Students", "students")
                        .WithMany("rClasse")
                        .HasForeignKey("studentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classe");

                    b.Navigation("schoolYear");

                    b.Navigation("students");
                });

            modelBuilder.Entity("sunuecole.models.Students", b =>
                {
                    b.HasOne("sunuecole.models.Tutor", "Tutor")
                        .WithMany("students")
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("sunuecole.models.Agents", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("paidSubscribes");
                });

            modelBuilder.Entity("sunuecole.models.Classe", b =>
                {
                    b.Navigation("infSubscribes");

                    b.Navigation("lessons");

                    b.Navigation("rClasse");
                });

            modelBuilder.Entity("sunuecole.models.DoClasse", b =>
                {
                    b.Navigation("missOrHiers");
                });

            modelBuilder.Entity("sunuecole.models.Evaluation", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("sunuecole.models.Hours", b =>
                {
                    b.Navigation("doClasse");
                });

            modelBuilder.Entity("sunuecole.models.InfSubscribe", b =>
                {
                    b.Navigation("paidSubscribes");
                });

            modelBuilder.Entity("sunuecole.models.Lesson", b =>
                {
                    b.Navigation("doClasse");

                    b.Navigation("evaluations");
                });

            modelBuilder.Entity("sunuecole.models.Room", b =>
                {
                    b.Navigation("doClasse");
                });

            modelBuilder.Entity("sunuecole.models.SchoolYear", b =>
                {
                    b.Navigation("evaluations");

                    b.Navigation("infSubscribes");

                    b.Navigation("rClasse");
                });

            modelBuilder.Entity("sunuecole.models.Students", b =>
                {
                    b.Navigation("missOrHiers");

                    b.Navigation("notes");

                    b.Navigation("paidSubscribes");

                    b.Navigation("rClasse");
                });

            modelBuilder.Entity("sunuecole.models.Supplies", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("sunuecole.models.Teacher", b =>
                {
                    b.Navigation("lessons");
                });

            modelBuilder.Entity("sunuecole.models.Tutor", b =>
                {
                    b.Navigation("students");
                });
#pragma warning restore 612, 618
        }
    }
}
